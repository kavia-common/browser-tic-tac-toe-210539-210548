{"is_source_file": true, "format": "JavaScript (React component)", "description": "React functional component 'Controls' that renders game configuration controls for a Tic Tac Toe game, including game mode selection, AI options, difficulty settings, and restart button.", "external_files": ["react"], "external_methods": ["React"], "published": ["Controls"], "classes": [], "methods": [{"name": "Controls({ mode, setMode, aiPlaysAs, setAiPlaysAs, difficulty, setDifficulty, onRestart, isAiThinking = false, })", "description": "React functional component rendering game control UI elements such as mode selection, AI options, difficulty, and restart functionality.", "scope": "", "scopeKind": ""}], "calls": ["setMode(e.target.value)", "setAiPlaysAs(e.target.value)", "setDifficulty({ ...difficulty, strategy: e.target.value })", "setDifficulty({ ...difficulty, depth: Number(e.target.value) })", "onRestart()"], "search-terms": ["Controls", "game configuration", "HUMAN_VS_HUMAN", "HUMAN_VS_AI", "AI plays as", "AI strategy", "minimax", "quick", "restart game", "React component"], "state": 2, "file_id": 22, "knowledge_revision": 62, "git_revision": "", "revision_history": [{"54": ""}, {"62": ""}], "ctags": [{"_type": "tag", "name": "Controls", "path": "/home/kavia/workspace/code-generation/browser-tic-tac-toe-210539-210548/tic_tac_toe_frontend/src/components/Controls.js", "pattern": "/^export default function Controls({$/", "language": "JavaScript", "kind": "function", "signature": "({ mode, setMode, aiPlaysAs, setAiPlaysAs, difficulty, setDifficulty, onRestart, isAiThinking = false, })"}, {"_type": "tag", "name": "mode", "path": "/home/kavia/workspace/code-generation/browser-tic-tac-toe-210539-210548/tic_tac_toe_frontend/src/components/Controls.js", "pattern": "/^          value={mode}$/", "language": "JavaScript", "kind": "field", "scope": "Controls.value", "scopeKind": "class"}], "hash": "3c26a76d11a40e5b5dc466b06001f614", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/components/Controls.js", "fields": [{"name": "value={mode}", "scope": "Controls.value", "scopeKind": "class", "description": "unavailable"}]}